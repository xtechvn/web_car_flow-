@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Form Đăng Ký Xe</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
            max-width: 900px;
            width: 100%;
            display: grid;
            grid-template-columns: 1fr 1fr;
            min-height: 600px;
        }

        .input-section {
            padding: 40px;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        }

        .output-section {
            padding: 40px;
            background: #f8f9ff;
            border-left: 3px solid #667eea;
        }

        .section-title {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .input-icon {
            width: 30px;
            height: 30px;
            background: #667eea;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .output-icon {
            width: 30px;
            height: 30px;
            background: #28a745;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .form-group {
            margin-bottom: 25px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

        input[type="text"], input[type="tel"] {
            width: 100%;
            padding: 15px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }

            input[type="text"]:focus, input[type="tel"]:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

        .submit-btn {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 10px;
        }

            .submit-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
            }

            .submit-btn:disabled {
                background: #ccc;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

        .output-box {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            border-left: 4px solid #667eea;
        }

        .status-message {
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            font-weight: 600;
        }

        .status-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .status-waiting {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .queue-number {
            font-size: 48px;
            font-weight: bold;
            color: #667eea;
            text-align: center;
            margin: 20px 0;
        }

        .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-top: 20px;
        }

        .info-item {
            background: #f8f9ff;
            padding: 15px;
            border-radius: 8px;
            border: 1px solid #e1e5e9;
        }

        .info-label {
            font-size: 12px;
            color: #666;
            text-transform: uppercase;
            margin-bottom: 5px;
        }

        .info-value {
            font-size: 16px;
            font-weight: bold;
            color: #333;
        }

        .timer {
            text-align: center;
            padding: 20px;
            background: #fff3cd;
            border-radius: 10px;
            border: 1px solid #ffeaa7;
        }

        .timer-text {
            font-size: 14px;
            color: #856404;
            margin-bottom: 10px;
        }

        .timer-countdown {
            font-size: 24px;
            font-weight: bold;
            color: #dc3545;
        }

        media (max-width: 768px) {
            .container

        {
            grid-template-columns: 1fr;
            max-width: 500px;
        }

        .input-section, .output-section {
            padding: 30px 20px;
        }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- INPUT SECTION -->
        <div class="input-section">
            <div class="section-title">
                <div class="input-icon">📝</div>
                NHẬP THÔNG TIN
            </div>

            <form id="carRegistrationForm">
                <div class="form-group">
                    <label for="name">Tên khách hàng(Trại hoặc đại lý)<span style="color:red">*</span></label>
                    <input type="text" id="name" name="plateNumber"
                           placeholder="Nhập câu trả lời của bạn" required>
                </div>
                <div class="form-group">
                    <label for="plateNumber">Biển số xe đăng ký <span style="color:red">*</span></label>
                    <input type="text" id="plateNumber" name="plateNumber"
                           placeholder="VD: 30A-12345"
                           pattern="[0-9]{2}[A-Z]{1}-[0-9]{4,5}"
                           required>
                </div>
                <div class="form-group">
                    <label for="GPLX">Số GPLX(3 số cuối giấy phép lái xe) <span style="color:red">*</span></label>
                    <input type="text" id="GPLX" name="plateNumber"
                           placeholder="Nhập câu trả lời của bạn" required>
                </div>
                <div class="form-group">
                    <label for="referee">Trọng tải xe(CCD: 6500 Kg) <span style="color:red">*</span></label>
                    <input type="text" id="referee" name="plateNumber"
                           placeholder="Nhập câu trả lời của bạn" required>
                </div>
                <div class="form-group">
                    <label for="phoneNumber">Số điện thoại tài xế <span style="color:red">*</span></label>
                    <input type="tel" id="phoneNumber" name="phoneNumber"
                           placeholder="VD: 0987654321"
                           pattern="[0-9]{10,11}"
                           required>
                </div>

                <button type="submit" class="submit-btn" id="submitBtn">
                    GỬI ĐĂNG KÝ
                </button>
            </form>

            <div id="timerSection" class="timer" style="display: none; margin-top: 20px;">
                <div class="timer-text">Bạn cần đợi trước khi gửi lại:</div>
                <div class="timer-countdown" id="countdown">14:59</div>
            </div>
        </div>

        <!-- OUTPUT SECTION -->
        <div class="output-section">
            <div class="section-title">
                <div class="output-icon">📊</div>
                KẾT QUẢ ĐĂNG KÝ
            </div>

            <div id="statusMessage" class="status-message status-waiting">
                ⏳ Vui lòng nhập thông tin và bấm "Gửi đăng ký"
            </div>

            <div class="output-box">
                <h3 style="margin-bottom: 15px; color: #333;">Số thứ tự của bạn:</h3>
                <div class="queue-number" id="queueNumber">---</div>
            </div>

            <div class="info-grid">
                <div class="info-item">
                    <div class="info-label">Biển số xe</div>
                    <div class="info-value" id="outputPlate">---</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Số điện thoại</div>
                    <div class="info-value" id="outputPhone">---</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Ngày đăng ký</div>
                    <div class="info-value" id="outputDate">---</div>
                </div>
                <div class="info-item">
                    <div class="info-label">Thời gian</div>
                    <div class="info-value" id="outputTime">---</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // API Configuration
        const API_BASE_URL = 'https://localhost:62988/api'; // Change to your API URL
        const ENDPOINTS = {
            REGISTER: '/carregistration/register',
            CHECK_RESTRICTION: '/carregistration/check-restriction',
            QUEUE_STATUS: '/carregistration/queue-status',
            CHECK_ZALO: '/carregistration/check-zalo-user'
        };

        // Global variables
        let countdownTimer = null;
        let isSubmitting = false;

        // Utility functions
        function showLoading(show = true) {
            const submitBtn = document.getElementById('submitBtn');
            const statusMessage = document.getElementById('statusMessage');

            if (show) {
                submitBtn.disabled = true;
                submitBtn.innerHTML = '🔄 Đang xử lý...';
                statusMessage.className = 'status-message status-waiting';
                statusMessage.innerHTML = '⏳ Đang gửi yêu cầu đăng ký...';
                isSubmitting = true;
            } else {
                submitBtn.disabled = false;
                submitBtn.innerHTML = 'GỬI ĐĂNG KÝ';
                isSubmitting = false;
            }
        }

        function showError(message) {
            const statusMessage = document.getElementById('statusMessage');
            statusMessage.className = 'status-message status-error';
            statusMessage.innerHTML = `❌ ${message}`;
        }

        function showSuccess(message) {
            const statusMessage = document.getElementById('statusMessage');
            statusMessage.className = 'status-message status-success';
            statusMessage.innerHTML = `✅ ${message}`;
        }

        function formatTime(minutes) {
            const mins = Math.floor(minutes);
            const secs = Math.floor((minutes - mins) * 60);
            return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        }

        // API Functions
        async function makeAPICall(endpoint, method = 'GET', data = null) {
            try {
                const config = {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                };

                if (data && method !== 'GET') {
                    config.body = JSON.stringify(data);
                }

                const response = await fetch(`${API_BASE_URL}${endpoint}`, config);

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
                }

                return await response.json();
            } catch (error) {
                console.error('API Call Error:', error);
                throw error;
            }
        }

        async function registerCar(plateNumber, phoneNumber, name, referee, GPLX) {
            return await makeAPICall(ENDPOINTS.REGISTER, 'POST', {
                plateNumber: plateNumber,
                phoneNumber: phoneNumber,
                Name: name,
                Referee: referee,
                GPLX: GPLX,
            });
        }

        async function checkTimeRestriction(plateNumber) {
            return await makeAPICall(`${ENDPOINTS.CHECK_RESTRICTION}/${plateNumber}`);
        }

        async function getQueueStatus() {
            return await makeAPICall(ENDPOINTS.QUEUE_STATUS);
        }

        // UI Update Functions
        function updateOutput(data) {
            // Update queue number
            document.getElementById('queueNumber').textContent =
                data.queueNumber ? data.queueNumber.toString().padStart(3, '0') : '---';

            // Update registration details
            document.getElementById('outputPlate').textContent = data.plateNumber || '---';
            document.getElementById('outputPhone').textContent = data.phoneNumber || '---';

            if (data.registrationTime) {
                const regTime = new Date(data.registrationTime);
                document.getElementById('outputDate').textContent = regTime.toLocaleDateString('vi-VN');
                document.getElementById('outputTime').textContent = regTime.toLocaleTimeString('vi-VN');
            } else {
                document.getElementById('outputDate').textContent = '---';
                document.getElementById('outputTime').textContent = '---';
            }
        }

        function startCountdown(remainingMinutes) {
            const timerSection = document.getElementById('timerSection');
            const countdown = document.getElementById('countdown');
            const submitBtn = document.getElementById('submitBtn');

            timerSection.style.display = 'block';
            submitBtn.disabled = true;
            submitBtn.textContent = 'VUI LÒNG ĐỢI...';

            let remaining = remainingMinutes;

            const updateCountdown = () => {
                if (remaining <= 0) {
                    clearInterval(countdownTimer);
                    timerSection.style.display = 'none';
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'GỬI ĐĂNG KÝ';
                    return;
                }

                countdown.textContent = formatTime(remaining);
                remaining -= 1 / 60; // Decrease by 1 second (1/60 minute)
            };

            updateCountdown(); // Initial call
            countdownTimer = setInterval(updateCountdown, 1000);
        }

        function clearCountdown() {
            if (countdownTimer) {
                clearInterval(countdownTimer);
                countdownTimer = null;
            }
            document.getElementById('timerSection').style.display = 'none';
        }

        // Event Handlers
        async function handleFormSubmit(e) {
            e.preventDefault();

            if (isSubmitting) return;

            const plateNumber = document.getElementById('plateNumber').value.trim();
            const phoneNumber = document.getElementById('phoneNumber').value.trim();
            const referee = document.getElementById('referee').value.trim();
            const GPLX = document.getElementById('GPLX').value.trim();
            const name = document.getElementById('name').value.trim();


            // Basic validation
            if (!plateNumber || !phoneNumber || !referee || !GPLX || !name) {
                showError('Vui lòng nhập đầy đủ thông tin!');
                return;
            }

            try {
                showLoading(true);

                // Call API to register car
                const response = await registerCar(plateNumber, phoneNumber, name, referee, GPLX);

                if (response.success) {
                    showSuccess(response.message);
                    updateOutput(response);

                    // Start countdown for next submission (15 minutes)
                    setTimeout(() => {
                        startCountdown(15);
                    }, 1000);
                } else {
                    showError(response.message);

                    // If there's remaining time, start countdown
                    if (response.remainingTimeMinutes) {
                        startCountdown(response.remainingTimeMinutes);
                    }
                }

            } catch (error) {
                console.error('Registration error:', error);

                // Parse specific error messages
                let errorMessage = 'Có lỗi xảy ra, vui lòng thử lại sau!';

                if (error.message.includes('15 phút') || error.message.includes('đợi')) {
                    errorMessage = error.message;
                    // Try to extract remaining time and start countdown
                    const match = error.message.match(/(\d+)\s*phút/);
                    if (match) {
                        const remainingMinutes = parseInt(match[1]);
                        startCountdown(remainingMinutes);
                    }
                } else if (error.message.includes('không đúng định dạng')) {
                    errorMessage = error.message;
                } else if (error.message.includes('Rate limit')) {
                    errorMessage = 'Bạn đang gửi quá nhanh, vui lòng đợi 15 phút!';
                    startCountdown(15);
                }

                showError(errorMessage);
            } finally {
                showLoading(false);
            }
        }

        async function handlePhoneBlur() {
            const phoneNumber = this.value.trim();
            if (!phoneNumber) return;

            try {
                const restriction = await checkTimeRestriction(plateNumber);
                if (!restriction.canSubmit && restriction.remainingMinutes > 0) {
                    showError(`Biển số xe này cần đợi ${restriction.remainingMinutes} phút nữa`);
                    startCountdown(restriction.remainingMinutes);
                } else {
                    clearCountdown();
                }
            } catch (error) {
                console.error('Error checking time restriction:', error);
                // Don't show error to user for this background check
            }
        }

        // Initialize app
        async function initializeApp() {
            try {
                // Load current queue status
                const queueStatus = await getQueueStatus();
                document.getElementById('queueNumber').textContent =
                    queueStatus.nextQueueNumber ? queueStatus.nextQueueNumber.toString().padStart(3, '0') : '001';

                console.log('App initialized successfully');
            } catch (error) {
                console.error('Error initializing app:', error);
                // Set default values if API is not available
                document.getElementById('queueNumber').textContent = '---';
            }
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize app
            initializeApp();

            // Form submission
            document.getElementById('carRegistrationForm').addEventListener('submit', handleFormSubmit);

            // Phone number blur event
            document.getElementById('phoneNumber').addEventListener('blur', handlePhoneBlur);

            // Format input as user types
            document.getElementById('plateNumber').addEventListener('input', function () {
                // Auto format plate number: 30a12345 -> 30A-12345
                let value = this.value.replace(/[^0-9A-Za-z]/g, '').toUpperCase();
                if (value.length >= 3) {
                    value = value.substring(0, 2) + value.substring(2, 3) + '-' + value.substring(3, 8);
                }
                this.value = value;
            });

            document.getElementById('phoneNumber').addEventListener('input', function () {
                // Only allow numbers
                this.value = this.value.replace(/[^0-9]/g, '');
            });
        });

        // Handle page visibility change to refresh countdown
        document.addEventListener('visibilitychange', function () {
            if (!document.hidden && countdownTimer) {
                // Page became visible, refresh countdown status
                const phoneNumber = document.getElementById('phoneNumber').value.trim();
                if (phoneNumber) {
                    checkTimeRestriction(phoneNumber).then(restriction => {
                        if (!restriction.canSubmit && restriction.remainingMinutes > 0) {
                            clearCountdown();
                            startCountdown(restriction.remainingMinutes);
                        } else {
                            clearCountdown();
                        }
                    }).catch(console.error);
                }
            }
        });
    </script>
</body>
</html>