@using XTECH_FRONTEND.Model;
@{
    Layout = null;
    var data = (List<RegistrationRecordMongo>)ViewBag.Data;
}
<style>
    .table-gray table {
        border-collapse: collapse; /* gộp viền lại, tránh bị đôi */
        width: 100%;
    }

        .table-gray table th,
        .table-gray table td {
            border: 1px solid #000; /* viền đen */
            padding: 4px 8px; /* thêm khoảng cách cho đẹp */
            text-align: center; /* căn giữa nội dung */
        }
</style>
<div class=" ">
    <div class="table-responsive table-gray">
        <table class="table table-nowrap" style="width:100% !important;">
            <thead>
                <tr style="background:#fdfddb">
                    <th>Tên khách hàng(Trại hoặc đại lý)</th>
                    <th>Biển số xe đăng ký </th>
                    <th>Tên lái xe</th>
                    <th>Tải trọng xe</th>
                    <th>Số điện thoại tài xế</th>
                    <th>Số thứ tự</th>
                    <th>Ngày đăng ký</th>
                    <th>Trạng thái gửi tin Zalo</th>
                    <th>Hoàn hảo/Trại *</th>
                </tr>
            </thead>
            <tbody id="dataBody">
                @if (data != null && data.Count > 0)
                {
                    foreach (var item in data)
                    {
                        <tr data-queue="@item.QueueNumber">
                            <td>@item.Name</td>
                            <td>@item.PlateNumber </td>
                            <td>@item.GPLX</td>
                            <td>@item.Referee</td>
                            <td>@item.PhoneNumber</td>
                            <td>@item.QueueNumber</td>
                            <td>@(item.CreatedTime)</td>
                            <td>@item.ZaloStatus</td>
                            <td>@item.Camp</td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/registrationHub")
        .withAutomaticReconnect([0, 2000, 10000, 30000]) // retry sau 0s, 2s, 10s, 30s
        .build();
  
    // Hàm render row
    function renderRow(item) {
        return `
            <tr data-queue="${item.queueNumber}">
                <td>${item.name}</td>
                <td>${item.plateNumber}</td>
                <td>${item.gplx}</td>
                <td>${item.referee}</td>
                <td>${item.phoneNumber}</td>
                <td>${item.queueNumber}</td>
                <td>${item.createdTime}</td>
                <td>${item.zaloStatus}</td>
                <td>${item.camp}</td>
            </tr>`;
    }

    // Hàm sắp xếp lại tbody theo QueueNumber tăng dần
    function sortTable() {
        const tbody = document.getElementById("dataBody");
        const rows = Array.from(tbody.querySelectorAll("tr"));

        rows.sort((a, b) => {
            const qa = parseInt(a.getAttribute("data-queue") || 0);
            const qb = parseInt(b.getAttribute("data-queue") || 0);
            return qa - qb;
        });

        tbody.innerHTML = "";
        rows.forEach(r => tbody.appendChild(r));
    }
    connection.start()
        .then(() => console.log("✅ Kết nối SignalR thành công"))
        .catch(err => console.error("❌ Lỗi kết nối:", err));
    // Nhận data mới từ server
    connection.on("ReceiveRegistration", function (item) {
        const tbody = document.getElementById("dataBody");
        tbody.insertAdjacentHTML("beforeend", renderRow(item));
        sortTable(); // sắp xếp lại ngay khi thêm
    });


  
    connection.onreconnecting(error => {
        console.warn("🔄 Đang reconnect...", error);
    });

    connection.onreconnected(connectionId => {
        console.log("✅ Đã reconnect. Connection ID:", connectionId);
    });

    connection.onclose(error => {
        console.error("❌ Kết nối bị đóng.", error);
    });

    
</script>